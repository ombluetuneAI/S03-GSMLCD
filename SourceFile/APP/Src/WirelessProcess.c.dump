
/*--------------------------------------------头文件-------------------------------------*/


#include "WirelessProcess.h"

/*---------------------------------------------常数--------------------------------------*/

#define	NullValue			0x00
#define RemoteValue			0xFE
#define DetectorValue		0xFC

#define DetectorTypeTotal	18
/*--------------------------------------------宏定义-------------------------------------*/
#define  RemoteUnlockProcess()   UnlockProcess()

void SirenAlarm(void);
/*---------------------------------------------变量--------------------------------------*/
//遥控列表
const u8 RemoteKeyValueTab[]=
{
	KeyUnlock1527,KeyAlarm1527,KeyAlawy1527,KeyHome1527,
	KeyAlawy2262,KeyHome2262,KeyUnLock2262,KeyAlarm2262
};
//探头列表
const u8  DetectorValueTab[]=
{
	KeyDoorOpen1527,KeyHongWai1527,KeyYanGan1527,
	KeyQiGan1527,Key_Help1527,Key_pale1527,
	KeyDoorClose1527,

 	KeyAlawy2262,KeyHome2262,KeyUnLock2262,
 	KeyAlarm2262,KeyDoor2262,KeyYanGan2262,
 	KeyQiGan2262,KeyHongWai2262,KeyWindows2262,
 	KeyHelp2262,KeyPale2262,
};
/*---------------------------------------------类型--------------------------------------*/
void AlarmSirenClose(void)
{
    CloseSiren();
}
/***************************************************************************************************

*描述		：检查遥控的合法性
*输入参数	：keyVal，收到的遥控键值
*输出参数	：返回0则是收到的数据不合法
*
**************************************************************************************************/
u8 RemoteValueCheck(u8 keyVal)
{
	u8 i;

	for(i=0;i<8;i++)
	{
		if(RemoteKeyValueTab[i]==keyVal)
		{
			return(1);
		}
	}
	return(0);
}
void SirenAlarm(void)
{
    u32 time;
    System.Device.Storage.ReadData(SirenDelayAddr,&App.Data.SrienTimes,1);
    if(App.Data.SrienTimes)
    {
        OpenSiren();
        time=App.Data.SrienTimes*45000;
        System.Device.Timer.Start(AlarmTime,TimerSystickHandle,time,AlarmSirenClose);
    }
}
/***************************************************************************************************

*描述		：检查探头的合法性
*输入参数	：DetectorVal，收到的探头控制字
*输出参数	：返回0则是收到的数据不合法
*
**************************************************************************************************/
u8 DetectorValueCheck(u8 DetectorVal)
{
	u8 i;

	for(i=0;i<DetectorTypeTotal;i++)
	{
		if(DetectorValueTab[i]==DetectorVal)
		{
			return(1);
		}
	}
	return(0);
}
/***************************************************************************************************

*描述		：返回遥控存储地址
*输入参数	：keyVal，收到的遥控键值
*输出参数	：返回0则是收到的数据不合法
*
**************************************************************************************************/
u32 *StorageAddr(void)
{
	MenuListStruct 	*currentMenu;
	u32				*addr;
	Form			*formPointer;
	ListboxList		*listx;
	
	currentMenu=CurrentMenu->Parent;
	currentMenu=currentMenu->Parent;
	
	formPointer=currentMenu->MenuItems[currentMenu->Selected];
	listx=System.Gui.Form.ListSearch(formPointer->ListPointer->List,formPointer->ListPointer->SelectedIndexes);
	addr=listx->FlashAddr;
	
	return addr;
}

/*********************************************************************************************************************
*
*描述		：返回名字地址，包括各种状态
*输入参数	：无
*输出参数	：返回地址指针
*********************************************************************************************************************/
u32 *StorageNameAddr(void)
{
	MenuListStruct 	*currentMenu;
	u32				*addr;
	Form			*formPointer;
	ListboxList		*listx;
	
	currentMenu=CurrentMenu->Parent;
	currentMenu=currentMenu->Parent;
	
	formPointer=currentMenu->MenuItems[currentMenu->Selected];
	listx=System.Gui.Form.ListSearch(formPointer->ListPointer->List,formPointer->ListPointer->SelectedIndexes);
	addr=listx->IconAdd;
	
	return addr;
}
/*********************************************************************************************************
*描述		：	获取防区号

*********************************************************************************************************/
u8 GetZoneNumber(void)
{
	MenuListStruct 	*currentMenu;
	Form			*formPointer;
	u8				res;
	
	currentMenu=CurrentMenu->Parent;
	currentMenu=currentMenu->Parent;	
	formPointer=currentMenu->MenuItems[currentMenu->Selected];
	res=formPointer->ListPointer->SelectedIndexes;
	return res+1;
}
/***************************************************************************************************

*描述		：比对库中的遥控
*输入参数	：bufferPointer,这里是收到的遥控地址
*输出参数	：0，在ID库中没有找到，返回其他则是当前ID在库中的索引号
*
**************************************************************************************************/
static u8 ComparisonRemoteID(u32 addr,u8 *bufferPointer,u16 total)
{
	u32 addrOffset;
	u16	i;
	u8 buffer[3];
	addrOffset=addr;
	for(i=0;i<total;i++)
	{
		addrOffset=addr+(i*20);
		System.Device.Storage.ReadData(addrOffset,buffer,3);
		if((buffer[0]==bufferPointer[0])&&(buffer[1]==bufferPointer[1]))
			return (1+i);
		memset(buffer,0,3);
	}
	return 0;
}
/***************************************************************************************************

*描述		：查找总已用ID
*输入参数	：addr,ID库首地址
			  addr,库首地址
			  counr，ID库总数
*输出参数	：
*
**************************************************************************************************/
static u8 GetRemoteTotal(u32 addr,u8 total)
{
	u32 addrCount;
	u8	i,count=0;
	u8 buffer[3];
	
	for(i=0;i<total;i++)
	{
		addrCount=addr+(i*20);
		System.Device.Storage.ReadData(addrCount,buffer,3);
		if((buffer[0]!=0)||(buffer[1]!=0))
			count++;
		memset(buffer,0x00,3);
	}
	return count;
}
/*****************************************************************************************
*
*描述		：获取探头总数
*输入参数	：addr,起始地址;total,库总数
*输出参数	：返回探头总数量
*
*****************************************************************************************/
static u8 GetDetectorTotal(u32 addr,u16 total)
{
	u32 addrCount;
	u16	i,count=0;
	u8 buffer[6];
	
	for(i=0;i<total;i++)
	{
		addrCount=addr+(i*10);
		System.Device.Storage.ReadData(addrCount,buffer,6);
		if(buffer[2]!=0)
			count++;
		memset(buffer,0x00,6);
	}
	return count;
}
/**************************************************************************************
*
*描述		：	查找空的ID地址并返回
*输入参数	：	total,库总数
*输出参数	：	返回0则是没有空的了，否则返回存储地址
*
**************************************************************************************/
static u32 DetectorAddrID(u16 total)
{
	u32 addr;
	u16	i;
	u8 buffer[6];

	for(i=0;i<total;i++)
	{
		addr=ZoneDetectorAddr+(i*10);
		memset(buffer,0x00,10);
		System.Device.Storage.ReadData(addr,buffer,6);
		if((buffer[2]==0)&&(buffer[1]==0)&&(buffer[0]==0))
		return addr;
	}	
	return 0;
}
/************************************************************************************
*
*描述		:	比对探头ID
*输入参数	：	addr,直址地址
				bufferPointer，要比对的ID指针
				total,总个数
*输出参数	：	返回0，没有一样的ID,返回其他的则是相同ID在库中的序号
*
************************************************************************************/
static u8 ComparisonDetectorID(u32 addr,u8 *bufferPointer,u16 total)
{
	u32 addrOffset;
	u16	i;
	u8 buffer[6];
	addrOffset=addr;
	for(i=0;i<total;i++)
	{
		addrOffset=addr+i*10;
		System.Device.Storage.ReadData(addrOffset,buffer,6);
		if((buffer[0]==bufferPointer[0])&&(buffer[1]==bufferPointer[1]))
			return (1+i);
		memset(buffer,0,6);
	}
	return 0;
}
/*******************************************************************************
*
*描述       ：延时报警处理
*输入参数   ：无
*输出参数   ：无
*
*******************************************************************************/
void DelayAlarmProcess(void)
{
    LogWrite(LogAlarmAddr,LogAlarmTotalAddr,1,LogAlarmZone,App.Data.AlarmZone);
    App.Data.SystemMode=SystemAlarmMode;
    if(App.Data.MessageTypeTotal)
        App.Data.SendMessage=1;
    else if(App.Data.CallTypeTotal)
        App.Data.CallMessage=1;
    App.Menu.FocusFormPointer=&App.Menu.AlarmForm;
    SirenAlarm();
}

/********************************************************************************
*
*描述       ：探头报警处理
*输入参数   ：number,探查头在库中的编号
*输出参数   ：无
*
********************************************************************************/
static void AlarmProcess(u8 number)
{
	u32 addr;
    u8  buffer[20];
    u8  delayAlarm;
    u8  zoneType;
    u32	DelayCall=0;
    
    App.Data.OriginateCount=0;
    App.Data.SendCount=0;
    App.Data.OriginateCalltimes=1;
	addr=ZoneDetectorAddr+((number-1)*10);
	System.Device.Storage.ReadData(addr,buffer,6);
    App.Data.AlarmType=DetectorAlarm;
    App.Data.AlarmZone=buffer[3];
    addr=Zone1NameAddr+((App.Data.AlarmZone-1)*20);
    System.Device.Storage.ReadData(addr,buffer,20);
    App.Data.AlarmSiren=buffer[12];
    zoneType=buffer[14];
    
    memset(App.Data.MessageString,0x00,30);
    addr=Zone1NameAddr+((App.Data.AlarmZone-1)*20); 
    System.Device.Storage.ReadData(addr,(u8*)buffer,20); 
    sprintf((char*)App.Data.MessageString, "%.*s %.*s",strlen((char*)buffer),(char*)buffer,strlen("Alarm"),"Alarm");
    
    switch(zoneType)
	{
		case SystemZoneClose:
            return;
		case SystemZoneAlarm://正常报警状态
            LogWrite(LogAlarmAddr,LogAlarmTotalAddr,3,LogAlarmZone,App.Data.AlarmZone);
            App.Data.SystemMode=SystemAlarmMode;
            if(App.Data.MessageTypeTotal)
                App.Data.SendMessage=1;
            else if(App.Data.CallTypeTotal)
                App.Data.CallMessage=1;
            App.Menu.FocusFormPointer=&App.Menu.AlarmForm;
            if(buffer[12]==0x37)
                SirenAlarm();
			break;
		case SystemZoneDelayAlarm://延时报警
			System.Device.Storage.ReadData(AlarmDelayAddr,&delayAlarm,1);
            if((delayAlarm<256)&&(delayAlarm>0))
            {
                DelayCall=delayAlarm*1000;
                System.Device.Timer.Start(AlarmTimeID,TimerMessageHandle,DelayCall,DelayAlarmProcess);
            }else if(delayAlarm==0)
            {
                LogWrite(LogAlarmAddr,LogAlarmTotalAddr,3,LogAlarmZone,App.Data.AlarmZone);
                App.Data.SystemMode=SystemAlarmMode;
                if(App.Data.MessageTypeTotal)
                    App.Data.SendMessage=1;
                else if(App.Data.CallTypeTotal)
                    App.Data.CallMessage=1;
                App.Menu.FocusFormPointer=&App.Menu.AlarmForm;
                if(buffer[12]==0x37)
                    SirenAlarm();
            }
			break;
		case SystemZoneHomeAlarm://在家报警
                LogWrite(LogAlarmAddr,LogAlarmTotalAddr,3,LogAlarmZone,App.Data.AlarmZone);
                App.Data.SystemMode=SystemAlarmMode;
                if(App.Data.MessageTypeTotal)
                    App.Data.SendMessage=1;
                else if(App.Data.CallTypeTotal)
                    App.Data.CallMessage=1;
                App.Menu.FocusFormPointer=&App.Menu.AlarmForm;
                if(buffer[12]==0x37)
                    SirenAlarm();
			break;
		case SystemZoneSOS://紧急报警
                LogWrite(LogAlarmAddr,LogAlarmTotalAddr,3,LogAlarmZone,App.Data.AlarmZone);
                App.Data.SystemMode=SystemAlarmMode;
                if(App.Data.MessageTypeTotal)
                    App.Data.SendMessage=1;
                else if(App.Data.CallTypeTotal)
                    App.Data.CallMessage=1;
                App.Menu.FocusFormPointer=&App.Menu.AlarmForm;
                if(buffer[12]==0x37)
                    SirenAlarm();
			break;
		case SystemZoneDoorbell://门铃
			System.Device.Voice.VoiceConfig(VoicePlayNumber,(uint8_t*)"018",1);
			break;
	}      
}
/****************************************************************************************************
*
*描述       ：获取门磁状态，用在非法布防中
*输入参数   ：无
*输出参数   ： 0,已经关门，返回其他是没关门
*
****************************************************************************************************/
static  u16 GetDoorState(void)
{
	u32 addrCount;
	u16	i,count=0;
	u8 buffer[6];
	
	for(i=0;i<300;i++)
	{
		addrCount=ZoneDetectorAddr+(i*10);
		System.Device.Storage.ReadData(addrCount,buffer,6);
		if(buffer[2]==KeyDoorOpen1527)
			return (i+1);
		memset(buffer,0x00,6);
	}
	return count;    
}
/***************************************************************************
*
*描述     ：发送撤防短信，是延时1秒后再发送的，为的是不让人感觉界面反应慢
*
***************************************************************************/
void DisarmSms(void)
{
    memset(App.Data.MessageString,0x00,30);
    sprintf((char*)App.Data.MessageString,"Disarm");
    App.Data.SendMessage=ENABLE;
    App.Data.SendCount=0;
}



void UnlockWireless(void)
{
    u8 data[3];
    
    data[0]=0xF2;
    data[1]=0x03;
    data[2]=0x02;
    System.Device.Wireless.WirelessSend(data);
}


/*************************************************************************************************
*
*描述       ：遥控撤防
*输入参数   ：无
*输出参数   ：无
*
**************************************************************************************************/
void UnlockProcess(void)
{
    u8      systemState;
    u8      temp;
    u8      sms=0;
    u8      numberPhone[30];
    u8      numberName[20];
    
    memset(numberName,0,20);
    memset(numberPhone,0,30);
    App.Data.SendMessage=DISABLE;
    App.Data.OriginateCount=0;
    App.Data.SendCount=0;
    if(App.Data.DelayArmFlag)
    {
        System.Device.Timer.Stop(ArmTimeID);
        App.Data.DelayArmFlag=DISABLE;
    }
    if(App.Data.SystemMode==SystemAlarmMode)
    {
        CallConnect=1;
        System.Device.Gsm.GsmATSend("ATH","OK",100);
        System.Device.Gsm.GsmATSend("AT+CHUP","OK",100);
    }
    systemState=SystemDisarmMode;
    App.Data.SystemMode=SystemDisarmMode;
    System.Device.Storage.Parameter.StorageWriteData(SystemModeAddr,(u16*)&systemState,1);
    System.Device.Storage.Parameter.StorageReadData(DisarmSMSNoticeAddr,&sms,1);
    System.Device.Storage.Parameter.StorageReadData(SMSReplyAddr,&temp,1);
    if((sms==1)&&(temp==1))
    {
        System.Device.Timer.Start(CallTimer,TimerSystickHandle,1000,DisarmSms);
    }
    App.Menu.FocusFormPointer=&App.Menu.StandbyForm;
  //  if(App.Data.SoundFlag)
//        System.Device.Voice.Siren(2); 
    CloseSiren();
    System.Device.Timer.Stop(AlarmTime);
    //System.Device.Storage.Parameter.StorageReadData(addr+8,buffer,8);
    System.Device.Timer.Start(WirelessID,TimerMessageHandle,500,UnlockWireless);
}
/***************************************************************
*
*描述       ：发送短信的消息到任务中执行
*输入参数   ：无
*输出参数   ：无
*
***************************************************************/
void SendMessageSystick100Routine(void)
{
    if(App.Data.SendMessage==ENABLE)
    {
        App.Data.SendMessage=0;
        PostMessage(MessageSendSMS, App.Data.SystemMode); 
    }
}
/*******************************************************************************
*描述         ：发送布防短信
*输入参数     ：无
*输出参数     ：无
*******************************************************************************/
void ArmSms(void)
{
    memset(App.Data.MessageString,0x00,30);
    sprintf((char*)App.Data.MessageString,"Arm");
    App.Data.SendMessage=ENABLE;
    App.Data.SendCount=0;
}
void ArmWireless(void)
{   
    u8 data[3];
    
    data[0]=0xF2;
    data[1]=0x03;
    data[2]=0x04;
    System.Device.Wireless.WirelessSend(data);
    
}
/*******************************************************************************
*
*描述       ：延时布防
*输入参数   ：无
*输出参数   ：无
*
********************************************************************************/
void DelayArmProcess(void)
{
    u8  state;
    u8  sms;
    u8  temp;
    
    state=SystemArmMode;
    App.Data.DelayArmFlag=DISABLE;
    System.Device.Storage.WriteData(SystemModeAddr,(u16*)&state,1);
    App.Data.SystemMode=state;
    System.Device.Storage.Parameter.StorageReadData(ArmSMSNoticeAddr,&sms,1);
    System.Device.Storage.Parameter.StorageReadData(SMSReplyAddr,&temp,1);
    LogWrite(LogArmAddr,LogArmTotalAddr,App.Data.ArmKeypadRemote,3,0xFF);
    if((sms==1)&&(temp==1))
    {
        System.Device.Timer.Start(CallTimer2,TimerSystickHandle,1000,ArmSms);
    }
 //   if(App.Data.SoundFlag)
//        System.Device.Voice.Siren(1);
    System.Device.Timer.Start(WirelessID,TimerMessageHandle,800,ArmWireless);    
    //页面切换    
}
/***********************************************************************************************
*
*描述       ：遥控在家布防和外出布防
*输入参数   ：keyValue,收到的遥控键值
*输出参数   ：无
*
***********************************************************************************************/
void SMSSendDelay(void)
{
    App.Data.SendMessage=ENABLE;
}
void RemoteAlawyAndStayProcess(u8 keyValue)
{
    u8      readyToArm;
    u8      boorState;
    u8      systemState;
    u8      sms=0;
    u8      armTime=0;
    u32     time;
    u8      temp;
    
    if(App.Data.SystemMode==SystemAlarmMode)return;
    App.Data.SendMessage=DISABLE;
    if(keyValue==KeyAlawy1527||KeyAlawy2262==keyValue)
        systemState=SystemArmMode;
    if(keyValue==KeyHome1527||KeyHome2262==keyValue)
        systemState=SystemStayMode;
    System.Device.Storage.ReadData(IllegalArmAddr,&readyToArm,1);
    if(readyToArm)
    {
        boorState=GetDoorState();
        if(boorState)
        {
            System.Device.Voice.VoiceConfig(VoicePlayNumber,(uint8_t*)"019",1);
            return;
        }
    }
    System.Device.Storage.ReadData(ArmDelayAddr,&armTime,1);
    if((armTime)&&(SystemArmMode==systemState))
    {
        time=armTime*1000;
        if(App.Data.DelayArmFlag)
        {
            System.Device.Timer.Stop(ArmTimeID);
            App.Data.DelayArmFlag=DISABLE;
        }
        else
        {
            System.Device.Timer.Start(ArmTimeID,TimerMessageHandle,time,DelayArmProcess); 
            App.Data.DelayArmFlag= ENABLE;
            return;
        }
    }
    {
        System.Device.Storage.WriteData(SystemModeAddr,(u16*)&systemState,1);
        App.Data.SystemMode=systemState;
        if(systemState==SystemStayMode)
        {
            LogWrite(LogArmAddr,LogArmTotalAddr,App.Data.ArmKeypadRemote,LogStay,0xFF);
            if(App.Data.DelayArmFlag)
            {
                System.Device.Timer.Stop(ArmTimeID);
                App.Data.DelayArmFlag=DISABLE;
            }
            System.Device.Storage.Parameter.StorageReadData(HomeSMSNoticeAddr,&sms,1);
            System.Device.Storage.Parameter.StorageReadData(SMSReplyAddr,&temp,1);
        }
        else if(systemState==SystemArmMode)
        {
            LogWrite(LogArmAddr,LogArmTotalAddr,App.Data.ArmKeypadRemote,LogArm,0xFF);
            System.Device.Storage.Parameter.StorageReadData(ArmSMSNoticeAddr,&sms,1);
            System.Device.Storage.Parameter.StorageReadData(SMSReplyAddr,&temp,1);
            System.Device.Timer.Start(WirelessID,TimerMessageHandle,800,ArmWireless); 
        }
        /*if((sms==1)&&(temp==1))
        {
            memset(App.Data.MessageString,0x00,30);
            if(App.Data.SystemMode==SystemStayMode)
                sprintf((char*)App.Data.MessageString,"Stay");
            else
                 sprintf((char*)App.Data.MessageString,"Arm");
            System.Device.Timer.Start(SIMCheckID,TimerMessageHandle,800,SMSSendDelay); 
            App.Data.SendCount=0;
        }*/
        //if(App.Data.SoundFlag)
            //System.Device.Voice.Siren(1);  
    }
}

/********************************************************************************************************
*
*描述       ：遥控报警，在这里获取防区号（遥控编号）和报警类型
*输入参数   ：pointer，接到遥控的指针
*输出参数   ：无
*备注       ：遥控是直接报警没有
********************************************************************************************************/
static void RemoteAlarmProcess(u8 *pointer)
{
    u8      remoteNumber;
    char    nameBuffer[20];
    u32     addr;
    
    App.Menu.FocusFormPointer=&App.Menu.AlarmForm;
    remoteNumber=ComparisonRemoteID(Remote1Addr,pointer,8);
    App.Data.SystemMode=SystemAlarmMode;
    App.Data.AlarmZone=remoteNumber;
    App.Data.AlarmType=RemoteAlarm;
    
    memset(App.Data.MessageString,0x00,30);
    addr=Remote1NameAddr+((App.Data.AlarmZone-1)*20); 
    System.Device.Storage.ReadData(addr,(u8*)nameBuffer,20); 
    sprintf((char*)App.Data.MessageString, "%.*s %.*s",strlen(nameBuffer),nameBuffer,strlen("Alarm"),"Alarm"); 
    
    if(App.Data.MessageTypeTotal)
        App.Data.SendMessage=1;
    else
        App.Data.CallMessage=1;
    App.Data.SendCount=0;
    App.Data.OriginateCount=0;
    App.Data.OriginateCalltimes=1;
    SirenAlarm();
}
/********************************************************************************************************
*描述		：处理遥控器对码与各种状态
*输入参数	：mode,主机模式
			  bufferPointer,当前收到的ID
*输出参数	：无
********************************************************************************************************/
static void RemoteProcess(u8 mode,u8 *bufferPointer)
{
	u32     addr;
	u8      temp;
	u8      keyValue; 
	Label   *label;
	char    buffer[30];
    u8      remoteNumber=0;
	
	if(SystemCodeMode==mode)
	{
		temp=ComparisonRemoteID(Remote1Addr,bufferPointer,8);
		if(temp)
		{
			label=App.Menu.FocusFormPointer->LabelPointer;
			while(null!=label)
			{
				if(0xF8==label->Type)
				{
					memset(buffer,0x00,30);
					sprintf((char*)buffer,"Configred %.2d remote",temp);
					memcpy((char*)label->StringBlockPointer,buffer, strlen(buffer));
				}
				label=label->NextLabelPointer;								
			}
			System.Device.Voice.VoiceConfig(VoicePlayNumber,(uint8_t*)"016",1);	
			App.Menu.FocusFormPointer->LabelUpdate=0xFE;
			return;
		}
		addr=*StorageAddr();//获取地址
		System.Device.Storage.Parameter.StorageWriteData(addr,(u16*)bufferPointer,3);
		addr=*StorageNameAddr();
		temp=1;
		System.Device.Storage.Parameter.StorageWriteData(addr+16,(u16*)&temp,1);

		temp=GetRemoteTotal(Remote1Addr,8);
		System.Device.Storage.Parameter.StorageWriteData(RemoteTotalAddr,(u16*)&temp,1);
		
		label=App.Menu.FocusFormPointer->LabelPointer;
		while(null!=label)
		{
			if(0xF8==label->Type)
			{
				memset(buffer,0x00,30);
				sprintf((char*)buffer,"Please trigger remote");
				memcpy((char*)label->StringBlockPointer,buffer, strlen(buffer));
			}
			label=label->NextLabelPointer;								
		}
		App.Menu.FocusFormPointer->LabelUpdate=0xFE;
		
		System.Device.Voice.VoiceConfig(VoicePlayNumber,(uint8_t*)"016",1);	
	}
	else
	{
		if(ComparisonRemoteID(Remote1Addr,bufferPointer,8))
		{
            keyValue=bufferPointer[2];
            remoteNumber=ComparisonRemoteID(Remote1Addr,bufferPointer,8);
            addr=Remote1NameAddr+((remoteNumber-1)*20);
            System.Device.Storage.ReadData(addr,(u8*)buffer,20); 
            if(buffer[12])
                App.Data.SoundFlag=1;
            else
                App.Data.SoundFlag=0;
            if(keyValue==KeyUnlock1527||KeyUnLock2262==keyValue)
            {
                LogWrite(LogDisarmAddr,LogDisarmTotalAddr,2,LogDisarm,0xFF);
                RemoteUnlockProcess();
            }
            if(keyValue==KeyAlawy1527||KeyAlawy2262==keyValue||keyValue==KeyHome1527||KeyHome2262==keyValue)
            {
                App.Data.ArmKeypadRemote=2;
                RemoteAlawyAndStayProcess(keyValue);
            }
            if(keyValue==KeyAlarm1527||KeyAlarm2262==keyValue)
            {
                LogWrite(LogAlarmAddr,LogAlarmTotalAddr,2,LogAlarmRemote,remoteNumber);
                RemoteAlarmProcess(bufferPointer);
            }
            System.SystemApp.ScreenSet();
		}
		else if(0==ComparisonRemoteID(Remote1Addr,bufferPointer,8))return;//非法遥控直接返回
		
	}
}
/**************************************************************************************************
*
*描述       ：探头的处理函数
*输入参数   ：mode,系统模式
*              pointer,收到的无线控头数据指针
*输出参数   ：无
*
**************************************************************************************************/
static void DetectorProcess(u8 mode,u8 *pointer)
{
	u8 		detectorTotal=0;
	u8		buffer[30];
	u8		zoneID[6];
	u8		temp;
	Label	*label;	
	u32		addrID;
	u32 	addrName;
	u8		zoneNumber;
    u8      res=0;
    u8      zoneType;
	
	if(SystemCodeMode==mode)
	{
		temp=ComparisonDetectorID(ZoneDetectorAddr,pointer,300);
		if(temp)//有重复的
		{
			label=App.Menu.FocusFormPointer->LabelPointer;
			while(null!=label)
			{
				if(0xF8==label->Type)
				{
					memset(buffer,0x00,30);
					sprintf((char*)buffer,"Configred %.2d Detector",temp);
					memcpy((char*)label->StringBlockPointer,buffer, strlen((char*)buffer));
				}
				label=label->NextLabelPointer;								
			}
			System.Device.Voice.VoiceConfig(VoicePlayNumber,(uint8_t*)"016",1);	
			App.Menu.FocusFormPointer->LabelUpdate=0xFE;
			return;
		}
		else
		{
            detectorTotal=GetDetectorTotal(ZoneDetectorAddr,300);
			zoneNumber=GetZoneNumber();//获取防区号
			addrName=*StorageNameAddr();//返回防区名字，防区号，防区状态，防区总探头个数 的地址
			addrID=DetectorAddrID(300);//获取当前空的ID
			if(addrID)
			{
				zoneID[0]=pointer[0];//addr1
				zoneID[1]=pointer[1];//addr2
				zoneID[2]=pointer[2];//data
				zoneID[3]=zoneNumber;//zone number
				zoneID[4]=0;
				zoneID[5]=0;
				System.Device.Storage.Parameter.StorageWriteData(addrID,(u16*)zoneID,6);//写入
				System.Device.Storage.Parameter.StorageReadData(addrID+6,zoneID,6);//
				
				addrName+=16;
				System.Device.Storage.Parameter.StorageReadData(addrName,&detectorTotal,1);//
				detectorTotal+=1;
				System.Device.Storage.Parameter.StorageWriteData(addrName,(u16*)&detectorTotal,1);//
				
				detectorTotal=GetDetectorTotal(ZoneDetectorAddr,300);
				System.Device.Storage.Parameter.StorageWriteData(DetectorTotalAddr,(u16*)&detectorTotal,1);
				App.Menu.FocusFormPointer->LabelUpdate=0xFE;
			}
		}
	}
	else 
	{
		temp=ComparisonDetectorID(ZoneDetectorAddr,pointer,300);//比对结果
		if(0==temp) return;
        //记录开关门
        System.SystemApp.ScreenSet();
        if((pointer[2]==KeyDoorClose1527)||(pointer[2]==KeyDoorOpen1527))
        {
			addrID=ZoneDetectorAddr+((temp-1)*10);
			System.Device.Storage.Parameter.StorageReadData(addrID,zoneID,6);//
			pointer[3]=zoneID[3];
			System.Device.Storage.Parameter.StorageWriteData(addrID,(u16*)pointer,4);
            if(pointer[2]==KeyDoorClose1527) return;//关门
        }
        switch(mode)
        {
            case SystemDisarmMode:
                    addrID=ZoneDetectorAddr+((temp-1)*10);
                    System.Device.Storage.Parameter.StorageReadData(addrID,zoneID,6);
                    App.Data.AlarmZone=zoneID[3];
                    addrName=Zone1NameAddr+((App.Data.AlarmZone-1)*20);
                    System.Device.Storage.Parameter.StorageReadData(addrName,buffer,20);
                    zoneType=buffer[14];
                    if(zoneType==SystemZoneSOS)
                    {
                        AlarmProcess(temp);
                        return;
                    }
                    if((pointer[2]==KeyQiGan1527)||(pointer[2]==KeyQiGan2262))      res=1;
                    if((pointer[2]==KeyYanGan1527)||(pointer[2]==KeyYanGan2262))    res=1;
                    if((pointer[2]==KeyAlarm1527)||(pointer[2]==KeyAlarm2262))      res=1;
                    if(0==res) return;
                    else
                        AlarmProcess(temp);                   
                    break;
            case SystemArmMode:
                    AlarmProcess(temp);           
                break;
            case SystemStayMode:
                    if((pointer[2]==KeyHongWai2262)&&(pointer[2]==KeyHongWai1527)) //在家模式下 红外不报警
                        return;
                    else
                        AlarmProcess(temp);  
                break;
            case SystemAlarmMode:
                AlarmProcess(temp);  
                break;
            case SystemDoorbellMode:
                System.Device.Voice.VoiceConfig(VoicePlayNumber,(uint8_t*)"019",1);
                break;
        }
	}
}
/**************************************************************************************************
*
*描述       ：获取电话号码类型总数
*输入参数   ：phoneType,要获取哪一类型的号码
*输出参数   ：返回获取到的号码数量，返回0则是没有该类型的号码
*
**************************************************************************************************/
u8 GetPhoneTypeTotal(u8 phoneType)
{
    u8  i;
    u8  total=0;
    u8  numberBuffer[30];
    u32 addr;
    
    for(i=0;i<8;i++)
    {
        addr=PhoneMember1Addr+(30*i);
        System.Device.Storage.ReadData(addr,numberBuffer,30);
        if(strstr((char*)numberBuffer,"Empty")==NULL)
        {
            addr=PhoneName1Addr+(20*i);
            System.Device.Storage.ReadData(addr,numberBuffer,20);
            if(phoneType==MessageType)
            {
                if(numberBuffer[16])
                    total++;
            }
            else if(phoneType==CallType)
            {
                if(numberBuffer[14])
                    total++;
            }   
        } 
        memset(numberBuffer,0x00,30);
    } 
    return total;
}
/**************************************************************************************************
*
*描述       ：无线信号处理
*输入参数   ：data,收到的无线数据
*输出参数   ：无
*
**************************************************************************************************/
void WirelessProcess(u32 data)
{
	u8 		addrBuffer[4];
	u8		ctrlData;
	u8		valType=0;
	
	addrBuffer[0]=Byte2(data);//地址0
	addrBuffer[1]=Byte1(data);//地址1
	addrBuffer[2]=Byte0(data);//数据码
	addrBuffer[3]=0;//数据码
	
	ctrlData=addrBuffer[2];
	if(1==RemoteValueCheck(ctrlData))
		valType=RemoteValue;
	else if(DetectorValueCheck(ctrlData))
		valType=DetectorValue;
	if((App.Data.UseWireless)&&(App.Data.CodeWireless))
	{
		if((App.Data.RxDis==RxDetector)&&(valType==RemoteValue))return;//在探头对码模式下 收到遥控的值直接返回
		if((App.Data.RxDis==RxRemote)&&(valType==DetectorValue))return;//在遥控对码模式下 收到探头的值直接返回
		App.Data.SystemMode=SystemCodeMode;
	}else if(App.Data.SystemMode!=SystemAlarmMode)
        System.Device.Storage.Parameter.StorageReadData(SystemModeAddr,&App.Data.SystemMode,1);
    App.Data.MessageTypeTotal=GetPhoneTypeTotal(MessageType);
    App.Data.CallTypeTotal=GetPhoneTypeTotal(CallType);
	switch(valType)
	{
		case NullValue://收到的数据不合法
			return;
		case RemoteValue:
			RemoteProcess(App.Data.SystemMode,addrBuffer);
			break;
		case DetectorValue:
			DetectorProcess(App.Data.SystemMode,addrBuffer);
			break;
	}
}

